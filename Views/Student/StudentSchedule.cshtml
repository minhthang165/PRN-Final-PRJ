@using PRN_Final_Project.Service.Dto
@using Newtonsoft.Json
@model ScheduleViewModel
@{
    ViewData["Title"] = "Schedule";
    Layout = "_Layout";
    
    var weekDays = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };
    var hours = new[] {"7 AM", "8 AM", "9 AM", "10 AM", "11 AM", "12 PM", "1 PM", "2 PM", "3 PM", "4 PM", "5 PM" };
    
    // Get the dates for the current week
    var dates = new List<DateOnly>();
    for (int i = 0; i < 5; i++)
    {
        dates.Add(Model.CurrentWeekStart.AddDays(i));
    }
}

<link rel="stylesheet" href="~/css/schedule.css" />
<style>
    /* Thêm CSS để đảm bảo sự kiện hiển thị đúng */
    .calendar-event {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: 2px;
        padding: 6px;
        border-radius: 4px;
        font-size: 13px;
        overflow: hidden;
        cursor: pointer;
        z-index: 10;
        background-color: #93c5fd;
        border-left: 3px solid #3b82f6;
    }
    
    /* Đảm bảo các ô lịch có position relative để có thể chứa các sự kiện absolute */
    .calendar-cell {
        border-bottom: 1px solid #f1f1f1;
        border-right: 1px solid #f1f1f1;
        position: relative;
        height: 80px;
    }
</style>

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2 class="mb-3">Schedule</h2>
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <button class="btn btn-outline-secondary me-2" id="prev-week">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <button class="btn btn-outline-primary me-3" id="today-btn">Today</button>
                    <button class="btn btn-outline-secondary" id="next-week">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
                <h4 class="mb-0" id="current-month">@Model.CurrentMonthYear</h4>
            </div>
        </div>
    </div>

    <div class="calendar-container">
        <!-- Header row with days -->
        <div class="calendar-header">
            <div class="calendar-header-cell"></div>
            @for (int i = 0; i < 5; i++)
            {
                var date = dates[i];
                var isToday = date.Equals(DateOnly.FromDateTime(DateTime.Today));
                <div class="calendar-header-cell @(isToday ? "active-day" : "")">
                    <div class="day-number">@date.Day</div>
                    <div class="day-name">@weekDays[i]</div>
                </div>
            }
        </div>

        <!-- Calendar body with time slots -->
        <div class="calendar-body">
            @foreach (var hour in hours)
            {
                // Parse hour value correctly
                var hourText = hour.Replace(" AM", "").Replace(" PM", "");
                var hourValue = int.Parse(hourText);
                
                // Adjust for PM hours (except 12 PM)
                if (hour.Contains(" PM") && hourValue != 12)
                {
                    hourValue += 12;
                }
                
                <div class="time-label">@hour</div>
                @for (int day = 0; day < 5; day++)
                {
                    <div class="calendar-cell" data-day="@day" data-hour="@hourValue" data-day-name="@weekDays[day]"></div>
                }
            }
        </div>
    </div>
</div>

<!-- Hidden inputs for schedule.js to use -->
<input type="hidden" id="userId" value="@User.FindFirst("UserId")?.Value" />
<input type="hidden" id="userRole" value="@User.FindFirst("Role")?.Value" />

<!-- Hidden debug data for JavaScript use -->
<input type="hidden" id="currentWeekStart" value="@Model.CurrentWeekStart.ToString("yyyy-MM-dd")" />
<input type="hidden" id="currentWeekEnd" value="@Model.CurrentWeekEnd.ToString("yyyy-MM-dd")" />
<input type="hidden" id="scheduleCount" value="@Model.Schedules.Count" />

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Store the current week start date for navigation
            let currentWeekStart = '@Model.CurrentWeekStart.ToString("yyyy-MM-dd")';
            
            // Get the dates for the current week
            const weekDates = [];
            const startDate = new Date(currentWeekStart);
            for (let i = 0; i < 5; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                weekDates.push(date.toISOString().split('T')[0]);
            }
            
            // Pass schedules data to JavaScript with explicit property mapping
            const rawScheduleData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Schedules));
            
            // Create properly structured schedule objects
            const scheduleData = rawScheduleData.map(schedule => {
                return {
                    id: schedule.Id,
                    className: schedule.ClassName,
                    subjectName: schedule.SubjectName,
                    roomName: schedule.RoomName,
                    roomId: schedule.RoomId,
                    mentorName: schedule.MentorName,
                    dayOfWeek: schedule.DayOfWeek,
                    startTime: schedule.StartTime,
                    endTime: schedule.EndTime,
                    startDate: schedule.StartDate,
                    endDate: schedule.EndDate,
                    mentorId: schedule.MentorId
                };
            });
            
            // Function to navigate to a different week
            function navigateToWeek(date) {
                window.location.href = `/Schedule?date=${date}`;
            }
            
            // Event handlers for navigation buttons
            document.getElementById('prev-week').addEventListener('click', function() {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() - 7); // Go back 7 days
                navigateToWeek(date.toISOString().split('T')[0]);
            });
            
            document.getElementById('next-week').addEventListener('click', function() {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() + 7); // Go forward 7 days
                navigateToWeek(date.toISOString().split('T')[0]);
            });
            
            document.getElementById('today-btn').addEventListener('click', function() {
                // Navigate to today's date
                navigateToWeek(new Date().toISOString().split('T')[0]);
            });
            
            // Function to render schedules directly
            function renderSchedules() {
                // Clear any existing events
                document.querySelectorAll('.calendar-event').forEach(el => el.remove());
                
                if (!scheduleData || scheduleData.length === 0) {
                    return;
                }
                
                // Process each schedule
                scheduleData.forEach((schedule, index) => {
                    try {
                        // Function to get day of week from date string
                        function getDayOfWeekFromDate(dateString) {
                            try {
                                const date = new Date(dateString);
                                if (isNaN(date.getTime())) return null;
                                
                                // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
                                const day = date.getDay();
                                // Convert to 0 = Monday, ..., 4 = Friday
                                return day === 0 ? null : day - 1;
                            } catch (e) {
                                return null;
                            }
                        }
                        
                        // Get the day of week (0-4 for Monday-Friday)
                        const dayOfWeekMap = {
                            'MONDAY': 0,
                            'monday': 0,
                            'Monday': 0,
                            'TUESDAY': 1,
                            'tuesday': 1,
                            'Tuesday': 1,
                            'WEDNESDAY': 2,
                            'wednesday': 2,
                            'Wednesday': 2,
                            'THURSDAY': 3,
                            'thursday': 3,
                            'Thursday': 3,
                            'FRIDAY': 4,
                            'friday': 4,
                            'Friday': 4
                        };
                        
                        // Try to determine day of week from multiple sources
                        let dayOfWeek;
                        
                        // First try: from dayOfWeek property
                        if (schedule.dayOfWeek && dayOfWeekMap[schedule.dayOfWeek] !== undefined) {
                            dayOfWeek = dayOfWeekMap[schedule.dayOfWeek];
                        }
                        // Second try: from startDate
                        else if (schedule.startDate) {
                            dayOfWeek = getDayOfWeekFromDate(schedule.startDate);
                        }
                        
                        if (dayOfWeek === undefined || dayOfWeek === null || dayOfWeek > 4) {
                            return; // Skip if not a weekday
                        }
                        
                        // Get the start and end hours
                        let startHour, endHour;
                        
                        // Parse startTime
                        if (schedule.startTime) {
                            if (typeof schedule.startTime === 'string') {
                                const startTimeParts = schedule.startTime.split(':');
                                startHour = parseInt(startTimeParts[0]);
                            } else if (typeof schedule.startTime === 'object') {
                                if (schedule.startTime.hour !== undefined) {
                                    startHour = schedule.startTime.hour;
                                } else if (schedule.startTime.Hour !== undefined) {
                                    startHour = schedule.startTime.Hour;
                                }
                            }
                        }
                        
                        // Parse endTime
                        if (schedule.endTime) {
                            if (typeof schedule.endTime === 'string') {
                                const endTimeParts = schedule.endTime.split(':');
                                endHour = parseInt(endTimeParts[0]);
                            } else if (typeof schedule.endTime === 'object') {
                                if (schedule.endTime.hour !== undefined) {
                                    endHour = schedule.endTime.hour;
                                } else if (schedule.endTime.Hour !== undefined) {
                                    endHour = schedule.endTime.Hour;
                                }
                            }
                        }
                        
                        if (startHour === undefined || isNaN(startHour) || endHour === undefined || isNaN(endHour)) {
                            return;
                        }
                        
                        // Find all cells for this day
                        const allCells = document.querySelectorAll('.calendar-cell');
                        const dayCells = Array.from(allCells).filter(cell => 
                            parseInt(cell.getAttribute('data-day')) === dayOfWeek
                        );
                        
                        // Find the cell for the start hour
                        let startCell = null;
                        
                        // First try: exact match on hour
                        startCell = dayCells.find(cell => parseInt(cell.getAttribute('data-hour')) === startHour);
                        
                        if (!startCell) {
                            // Find the closest hour that's visible in the calendar
                            if (dayCells.length > 0) {
                                // Sort cells by how close their hour is to the target hour
                                const sortedCells = dayCells.sort((a, b) => {
                                    const hourA = parseInt(a.getAttribute('data-hour'));
                                    const hourB = parseInt(b.getAttribute('data-hour'));
                                    return Math.abs(hourA - startHour) - Math.abs(hourB - startHour);
                                });
                                
                                startCell = sortedCells[0];
                            } else {
                                return;
                            }
                        }
                        
                        // Calculate the event height based on duration
                        const durationHours = endHour - startHour;
                        const eventHeight = durationHours * 80; // Each hour cell is 80px high
                        
                        // Create the event element
                        const eventEl = document.createElement('div');
                        eventEl.className = 'calendar-event';
                        eventEl.id = `event-${schedule.id}`;
                        
                        // Determine the class type for styling
                        const subjectName = (schedule.subjectName || '').toLowerCase();
                        if (subjectName.includes('korean')) {
                            eventEl.classList.add('korean');
                        } else if (subjectName.includes('japanese')) {
                            eventEl.classList.add('japanese');
                        } else if (subjectName.includes('code')) {
                            eventEl.classList.add('code');
                        }
                        
                        // Format time for display
                        function formatTime(hour) {
                            if (hour === 12) return "12 PM";
                            if (hour > 12) return `${hour-12} PM`;
                            return `${hour} AM`;
                        }
                        
                        // Set the event content
                        eventEl.innerHTML = `
                            <div class="event-title">${schedule.className || 'Class'}</div>
                            <div class="event-details">
                                <div>Subject: ${schedule.subjectName || 'N/A'}</div>
                                <div>Room: ${schedule.roomName || 'N/A'}</div>
                                <div>Time: ${formatTime(startHour)} - ${formatTime(endHour)}</div>
                            </div>
                        `;
                        
                        // Position the event
                        eventEl.style.height = `${eventHeight}px`;
                        eventEl.style.backgroundColor = '#93c5fd';
                        eventEl.style.borderLeft = '3px solid #3b82f6';
                        eventEl.style.position = 'absolute';
                        eventEl.style.top = '0';
                        eventEl.style.left = '0';
                        eventEl.style.right = '0';
                        eventEl.style.zIndex = '10';
                        
                        // Add event to the cell
                        startCell.appendChild(eventEl);
                        
                    } catch (error) {
                        console.error(`Error processing schedule ${index + 1}:`, error);
                    }
                });
            }
            
            // Render schedules
            renderSchedules();
        });
    </script>
}