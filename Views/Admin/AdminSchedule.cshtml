@model PRN_Final_Project.Service.Dto.AdminScheduleViewModel
@{
    ViewData["Title"] = "Manage Schedule";
}

@section Styles {
    <link rel="stylesheet" href="~/css/adminSchedule.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* CSS để giao diện trông giống trong ảnh */
        .schedule-table {
            table-layout: fixed;
            border-collapse: collapse;
            width: 100%;
        }

            .schedule-table th, .schedule-table td {
                border: 1px solid #e2e8f0;
                text-align: center;
                padding: 8px;
                height: 70px; /* Tăng chiều cao cho dễ nhìn */
                vertical-align: top;
            }

        .room-column {
            width: 120px;
            font-weight: 500;
            vertical-align: middle !important;
        }

        .schedule-filled-cell {
            padding: 8px;
            color: #2d3748;
            font-size: 13px;
            text-align: left;
            border-radius: 4px; /* Bo góc nhẹ */
            border-left: 5px solid rgba(0,0,0,0.2) !important; /* Thêm đường viền trái để nhấn mạnh */
        }

            .schedule-filled-cell div {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                line-height: 1.5;
            }
    </style>
}

<div class="container">
    <div class="nav-bar">
        <div class="nav-buttons">
            <button class="nav-btn-1" id="prevDay" title="Previous Day">
                <i class="fas fa-chevron-right"></i>
            </button>
            <button class="nav-btn-1" id="nextDay" title="Next Day">
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="nav-btn" id="todayBtn">Today</button>
        </div>
        <div class="current-date" data-current-date="@Model.CurrentDate.ToString("yyyy-MM-dd")">
            @Model.CurrentDate.ToString("dd/MM/yyyy")
        </div>
        <div class="action-buttons">
            <button class="btn btn-dark" id="importScheduleBtn">Import Schedule</button>
            <button class="btn btn-dark" id="downloadTemplateBtn">Download Template</button>
        </div>
    </div>

    <div class="schedule-container">
        <table class="schedule-table">
            <thead>
                <tr>
                    <th class="room-column">Room / Time</th>
                    @foreach (var slot in Model.TimeSlots)
                    {
                        <th>@slot</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (Model.Rooms == null || !Model.Rooms.Any())
                {
                    <tr><td colspan="@(Model.TimeSlots.Count + 1)">No rooms found.</td></tr>
                }
                else
                {
                    foreach (var room in Model.Rooms)
                    {
                        <tr>
                            <td class="room-column">@room.RoomName</td>
                            @{
                                int slotIndex = 0;
                                while (slotIndex < Model.TimeSlots.Count)
                                {
                                    var currentSlotString = Model.TimeSlots[slotIndex];

                                    // Tìm lịch học bắt đầu tại slot này
                                    var cellData = Model.ScheduleCells.FirstOrDefault(c =>
                                    c.RoomId == room.RoomId &&
                                    c.TimeSlot == currentSlotString
                                    );

                                    if (cellData != null)
                                    {
                                        // Tính toán colspan dựa trên thời gian bắt đầu và kết thúc
                                        var startTime = TimeSpan.Parse(cellData.TimeRange.AsSpan(0, 5));
                                        var endTime = TimeSpan.Parse(cellData.TimeRange.AsSpan(8, 5));

                                        int endSlotIndex = slotIndex;
                                        while (endSlotIndex < Model.TimeSlots.Count && TimeSpan.Parse(Model.TimeSlots[endSlotIndex]) < endTime)
                                        {
                                            endSlotIndex++;
                                        }

                                        int colspan = endSlotIndex - slotIndex;
                                        if (colspan == 0) colspan = 1; // Lịch học phải chiếm ít nhất 1 slot

                                        <td colspan="@colspan" class="schedule-filled-cell" style="background-color: @cellData.Color;">
                                            <div><b>@cellData.TimeRange</b></div>
                                            <div>@cellData.Subject</div>
                                            <div>@cellData.ClassName</div>
                                            <div>@cellData.Teacher</div>
                                        </td>

                                        slotIndex += colspan;
                                    }
                                    else
                                    {
                                        // Ô trống
                                        <td></td>
                                        slotIndex++;
                                    }
                                }
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Import Schedule -->
<div id="importScheduleModal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); align-items:center; justify-content:center;">
    <div style="background:#fff; padding:32px; border-radius:8px; min-width:320px; max-width:90vw;">
        <h4>Import Schedule Excel</h4>
        <input type="file" id="importScheduleFile" accept=".xlsx,.xls" style="margin-bottom:16px;">
        <div id="importScheduleStatus" style="color:red; margin-bottom:8px;"></div>
        <button id="importScheduleSubmit" class="btn btn-dark">Import</button>
        <button id="importScheduleCancel" class="btn btn-outline" style="margin-left:8px;">Cancel</button>
    </div>
</div>

@section Scripts {
    <script>
        // Script đơn giản để xử lý việc chuyển ngày
        document.addEventListener('DOMContentLoaded', function () {
            const dateElement = document.querySelector('.current-date');
            const currentDate = new Date(dateElement.getAttribute('data-current-date'));

            const navigateToDate = (date) => {
                const yyyy = date.getFullYear();
                const mm = String(date.getMonth() + 1).padStart(2, '0');
                const dd = String(date.getDate()).padStart(2, '0');
                // Chuyển hướng trang với tham số date mới
                window.location.href = `/AdminSchedule?date=${yyyy}-${mm}-${dd}`;
            };

            document.getElementById('todayBtn').addEventListener('click', () => {
                navigateToDate(new Date());
            });

            document.getElementById('nextDay').addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() + 1);
                navigateToDate(currentDate);
            });

            document.getElementById('prevDay').addEventListener('click', () => {
                currentDate.setDate(currentDate.getDate() - 1);
                navigateToDate(currentDate);
            });

            // Import Schedule popup logic
            const importBtn = document.getElementById('importScheduleBtn');
            const modal = document.getElementById('importScheduleModal');
            const fileInput = document.getElementById('importScheduleFile');
            const statusDiv = document.getElementById('importScheduleStatus');
            const submitBtn = document.getElementById('importScheduleSubmit');
            const cancelBtn = document.getElementById('importScheduleCancel');

            importBtn.addEventListener('click', function () {
                statusDiv.textContent = '';
                statusDiv.style.color = 'red';
                fileInput.value = '';
                modal.style.display = 'flex';
            });

            cancelBtn.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            submitBtn.addEventListener('click', async function () {
                if (!fileInput.files.length) {
                    statusDiv.textContent = 'Please select an Excel file!';
                    statusDiv.style.color = 'red';
                    return;
                }
                statusDiv.textContent = 'Uploading...';
                statusDiv.style.color = '#333';
                submitBtn.disabled = true;

                const formData = new FormData();
                formData.append('file', fileInput.files[0]);

                try {
                    const res = await fetch('/api/excel/scheduling/generate', {
                        method: 'POST',
                        body: formData
                    });
                    if (!res.ok) {
                        const err = await res.text();
                        statusDiv.textContent = 'Import failed: ' + err;
                        statusDiv.style.color = 'red';
                        submitBtn.disabled = false;
                        return;
                    }
                    statusDiv.style.color = 'green';
                    statusDiv.textContent = 'Import successful! Reloading...';
                    setTimeout(() => window.location.reload(), 1200);
                } catch (e) {
                    statusDiv.textContent = 'Error: ' + e.message;
                    statusDiv.style.color = 'red';
                    submitBtn.disabled = false;
                }
            });
        });
    </script>
}